xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian
Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,
eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel
Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt
Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John
Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller,
Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin
Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan
Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel
Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude
Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal,
Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe,
Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng,
ZhUyU1997, and Zou Chang Wei.


The code in the files that constitute xv6 is
Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".

need to handle the case when server is down , but clients are working



In your MLFQ scheduler implementation, p->ticks and p->lastscheduledticks serve two different but complementary purposes:

1. p->ticks
Purpose: Tracks how long the current process has been running at its current priority level.

Role in the Scheduler:

It ensures that a process does not exceed its allowed time slice for its current priority level.
When p->ticks reaches a certain threshold (depending on the priority), the process is moved to a lower priority queue.
Behavior:

Each process has a certain time slice based on its priority:
Priority 0: 1 tick
Priority 1: 4 ticks
Priority 2: 8 ticks
Priority 3: 16 ticks
When a process uses up its time slice (p->ticks reaches the threshold), it is demoted to a lower priority and its p->ticks is reset to zero.
Example:

A process in priority 1 (time slice of 4 ticks) runs and increments p->ticks on each clock interrupt. When p->ticks == 4, the process is demoted to priority 2, and p->ticks is reset to 0 for the new priority level.
2. p->lastscheduledticks
Purpose: Tracks how long it has been since the last time the process was scheduled to run.

Role in the Scheduler:

Helps the scheduler decide which process to schedule next among processes of the same priority.
It is used to prevent starvation and ensure fairness among processes by giving preference to processes that haven’t been scheduled in a while.
Behavior:

lastscheduledticks is incremented for each runnable process that is waiting for CPU time but is not currently running.
For running processes, lastscheduledticks is reset to 0 when the process starts running.
When the scheduler is deciding between processes of the same priority, it will pick the one that hasn’t been scheduled for the longest time (i.e., the process with the highest lastscheduledticks).
Example:

If there are two processes with the same priority and both are runnable, the process with the higher lastscheduledticks (i.e., the one that hasn't run for longer) will be given preference.
